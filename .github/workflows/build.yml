name: Build Golang UBI Container
on:
  push:
    paths-ignore:
      - 'README.md'
    branches:
      - main
    tags:
      - v*
jobs:
  # Build the container
  build-container:
    name: Build Container
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:

    - name: Check out code
      uses: actions/checkout@v3

    - name: Git Build Info
      id: git_build_info
      run: |
        echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
        echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
        echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

    - name: Get the latest version of Golang
      id: golang_version
      run: |
        echo "SOURCE_NAME: ${{ steps.git_build_info.outputs.SOURCE_NAME }}"
        echo "SOURCE_BRANCH: ${{ steps.git_build_info.outputs.SOURCE_BRANCH }}"
        echo "SOURCE_TAG: ${{ steps.git_build_info.outputs.SOURCE_TAG }}"
        echo ::set-output name=GOLANG_VERSION::$(curl -sSL https://golang.org/VERSION?m=text | sed 's/go//g')
        IS_TAGGED_VERSION="false"
        if [ ${SOURCE_NAME:0:1} = "v" ]; then IS_TAGGED_VERSION="true"; fi
        echo ::set-output name=IS_TAGGED_VERSION::$IS_TAGGED_VERSION

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          quay.io/polyglotsystems/golang-ubi
        # generate Docker tags based on the following events/attributes
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Login to Quay
      uses: docker/login-action@v1 
      with:
        registry: quay.io
        username: "${{ secrets.REGISTRY_USERNAME }}"
        password: "${{ secrets.REGISTRY_TOKEN }}"

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        file: Containerfile
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          GOLANG_VERSION=${{ steps.golang_version.outputs.GOLANG_VERSION }}
          SYSTEM_OS=linux
          SYSTEM_ARCH=amd64
          SOURCE_NAME=${{ steps.git_build_info.outputs.SOURCE_NAME }}

    - name: Create a new Release with the newly built container
      if: "contains(steps.golang_version.outputs.IS_TAGGED_VERSION, 'true')"
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GHUB_TOKEN }}